import React, { useState } from "react";
import CreateDetails from "../components/CreateDetails";
import CreatePassword from "../components/CreatePassword";
import LogoImage from "/images/logo.png";

function Register() {
  const [createPassword, setCreatePassword] = useState(false);

  const handleNextCreatePassword = () => {
    setCreatePassword(true);
  };

  return (
    <div>
      <div className="grid grid-cols-2 m-auto p-[100px] h-auto">
        <div className="bg-secondary flex flex-col items-center justify-center">
          <img src={LogoImage} alt="" className="w-[200px]" />
          <div className="text-center xl:text-left">
            <h1 className="text-4xl font-bold pt-5">
              AUTHENTIQUE COLLECTIBLES
            </h1>
            <p className="text-lg">TOYS • BAGS SNEAKERS • & MORE</p>
          </div>
        </div>
        <form className="bg-primary">
          {createPassword ? (
            <CreatePassword />
          ) : (
            <CreateDetails
              handleNextCreatePassword={handleNextCreatePassword}
            />
          )}
        </form>
      </div>
    </div>
  );
}

import React, { useState } from "react";
import { FaRegEye, FaRegEyeSlash } from "react-icons/fa6";
import LogoImage from "/images/logo.png";
import { useRegisterUserMutation } from "../redux/features/auth/authApi";
import { useNavigate } from "react-router-dom";
import CreateDetails from "../components/CreateDetails";
import CreatePassword from "../components/CreatePassword";

const Register = () => {
  const [step, setStep] = useState("details");

  const handleShowPassword = () => setShowPassword(!showPassword);
  const handleShowConfirmPassword = () =>
    setShowConfirmPassword(!showConfirmPassword);

  // Handle "Next" button click
  const handleNext = (e) => {
    e.preventDefault();
    setStep("password"); // Move to the password form
  };

  const handleConfirmPasswordChange = (e) => {
    const confirmPasswordValue = e.target.value;
    setConfirmPassword(confirmPasswordValue);
    setPasswordMatchError(confirmPasswordValue !== password);
  };
  const handlePasswordChange = (e) => {
    const passwordValue = e.target.value;
    setPassword(passwordValue);
    setPasswordLengthError(passwordValue.length < 8);
    setPasswordSymbolError(
      !(
        /[A-Z]/.test(passwordValue) &&
        /[a-z]/.test(passwordValue) &&
        /\d/.test(passwordValue)
      )
    );
    setPasswordMatchError(passwordValue !== confirmPassword);
  };

  const [registerUser, { isLoading }] = useRegisterUserMutation();
  const navigate = useNavigate();

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    const data = {
      email,
      password,
      firstName,
      lastName,
      birthday: `${day}-${month}-${year}`,
    };
    try {
      await registerUser(data).unwrap();
      navigate("/signin");
    } catch (error) {
      setMessage("Registration Failed");
    }
    console.log(data);
  };
  const [message, setMessage] = useState("");
  const [day, setDay] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");

  //password
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [passwordLengthError, setPasswordLengthError] = useState(true);
  const [passwordSymbolError, setPasswordSymbolError] = useState(true);
  const [passwordMatchError, setPasswordMatchError] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const days = Array.from({ length: 31 }, (_, i) => i + 1);
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const years = Array.from(
    { length: 100 },
    (_, i) => new Date().getFullYear() - i
  );

  return (
    <div className="grid grid-cols-2 m-auto p-[100px] h-auto">
      <div className="bg-secondary flex flex-col items-center justify-center">
        <img src={LogoImage} alt="" className="w-[200px]" />
        <div className="text-center xl:text-left">
          <h1 className="text-4xl font-bold pt-5">AUTHENTIQUE COLLECTIBLES</h1>
          <p className="text-lg">TOYS • BAGS SNEAKERS • & MORE</p>
        </div>
      </div>
      <div className="bg-primary">
        <div className="m-auto px-10 py-10 text-white">
          {/* Step 1: User Details Form */}
          {step === "details" && (
            <CreateDetails
              firstName={firstName}
              setFirstName={setFirstName}
              lastName={lastName}
              setLastName={setLastName}
              day={day}
              setDay={setDay}
              month={month}
              setMonth={setMonth}
              year={year}
              setYear={setYear}
              email={email}
              setEmail={setEmail}
              handleNext={handleNext}
            />
          )}

          {/* Step 2: Password Form */}
          {step === "password" && (
            <CreatePassword
              password={password}
              confirmPassword={confirmPassword}
              showPassword={showPassword}
              showConfirmPassword={showConfirmPassword}
              passwordLengthError={passwordLengthError}
              passwordSymbolError={passwordSymbolError}
              passwordMatchError={passwordMatchError}
              handlePasswordChange={(e) => setPassword(e.target.value)}
              handleConfirmPasswordChange={(e) =>
                setConfirmPassword(e.target.value)
              }
              handleShowPassword={() => setShowPassword(!showPassword)}
              handleShowConfirmPassword={() =>
                setShowConfirmPassword(!showConfirmPassword)
              }
              handleSubmit={handleSubmit}
            />
          )}
        </div>
      </div>
    </div>
  );
};

// export default Register;
